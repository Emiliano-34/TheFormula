import express from 'express';
import fetch from 'node-fetch';
import { cargarCatalogoProductos } from '../utils/cargarCatalogo.js';
import dotenv from 'dotenv';

// Cargar las variables de entorno desde el .env (para desarrollo local)
// En Render, estas variables se configuran en el dashboard
dotenv.config();

const router = express.Router();
let catalogo = [];

try {
Â  catalogo = cargarCatalogoProductos();
} catch (error) {
Â  console.error("Error al cargar el catÃ¡logo de productos localmente:", error);
}

const mensajeBienvenida = `Hola, soy **FermÃ­n**, tu asistente experto en suplementos y salud. ðŸ’ŠðŸ’ª

Nuestra tienda ofrece:
- MultivitamÃ­nicos
- ProteÃ­nas
- Omega-3
- Suplementos deportivos

Dime cÃ³mo te puedo ayudar :)`;

const respuestasPredefinidas = [
Â  {
Â  Â  patrones: ['hola', 'buenas', 'hey', 'quÃ© tal', 'saludos'],
Â  Â  respuesta: mensajeBienvenida,
Â  },
Â  {
Â  Â  patrones: ['opciones veganas', 'recomiÃ©ndame opciones veganas', 'algo vegano'],
Â  Â  respuesta: `AquÃ­ tienes algunas opciones que podrÃ­an interesarte:\n- Barra Vegana Lenny & Larrys Chocolate Almond Sea Salt 45 Gramos\n- ProteÃ­na vegetal con chÃ­a y avena`,
Â  },
Â  {
Â  Â  patrones: ['recomiÃ©ndame proteÃ­nas', 'proteÃ­na', 'quiero proteÃ­na', 'proteinas'],
Â  Â  respuesta: `AquÃ­ tienes algunas opciones que podrÃ­an interesarte:\n- ProteÃ­na Birdman Vainilla 500g\n- ProteÃ­na Whey Optimum 1kg Chocolate`,
Â  }
];

// FunciÃ³n para buscar coincidencia con patrones predefinidos
function buscarRespuestaPredefinida(mensaje) {
Â  const mensajeLower = mensaje.toLowerCase();
Â  for (const r of respuestasPredefinidas) {
Â  Â  if (r.patrones.some(p => mensajeLower.includes(p))) {
Â  Â  Â  return r.respuesta;
Â  Â  }
Â  }
Â  return null;
}

// Generar prompt para la API de lenguaje
function construirPromptCatalogo() {
Â  return catalogo.map(p =>
Â  Â  `- ${p.nombre} | Ingredientes: ${p.ingredientes}`
Â  ).join('\n');
}

// Ruta POST para el chat
router.post('/chat', async (req, res) => {
Â  const { userMessage } = req.body;

Â  // 1. Revisar respuestas locales primero
Â  const respuestaLocal = buscarRespuestaPredefinida(userMessage);
Â  if (respuestaLocal) {
Â  Â  return res.json({ respuesta: respuestaLocal });
Â  }

Â  // 2. Si no hay respuesta local, consultar API de lenguaje
  
  // Leer las credenciales de las variables de entorno de Render
  const API_URL = process.env.API_URL;
  const API_KEY = process.env.API_KEY;
  const MODEL = process.env.MODEL;

  // Validar que las variables de entorno estÃ©n configuradas
  if (!API_KEY || !API_URL || !MODEL) {
    console.error("Error: Faltan variables de entorno para la API del chatbot.");
    return res.status(500).json({ error: "La configuraciÃ³n del chatbot en el servidor estÃ¡ incompleta." });
  }

Â  const catalogoTexto = construirPromptCatalogo();

Â  const promptSistema = `
Eres FermÃ­n, un experto en suplementos, vitaminas y productos de salud.
Usa la siguiente lista de productos para responder basÃ¡ndote en sus ingredientes y nombres. 
Si el usuario menciona sabores, condiciones (como vegano, sin azÃºcar) o ingredientes, sugiere productos relacionados.
SÃ© amable y conversacional.

Lista de productos:
${catalogoTexto}
`;

Â  try {
Â  Â  const response = await fetch(API_URL, {
Â  Â  Â  method: 'POST',
Â  Â  Â  headers: {
Â  Â  Â  Â  Authorization: `Bearer ${API_KEY}`,
Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  Â  },
Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  model: MODEL,
Â  Â  Â  Â  messages: [
Â  Â  Â  Â  Â  { role: 'system', content: promptSistema },
Â  Â  Â  Â  Â  { role: 'user', content: userMessage },
Â  Â  Â  Â  ],
Â  Â  Â  }),
Â  Â  });
    
    if (!response.ok) {
        const errorBody = await response.text();
        throw new Error(`Error en la API del Chatbot: ${response.statusText} - ${errorBody}`);
    }

Â  Â  const data = await response.json();

Â  Â  if (data.choices?.[0]?.message?.content) {
Â  Â  Â  return res.json({ respuesta: data.choices[0].message.content });
Â  Â  } else {
Â  Â  Â  return res.json({
Â  Â  Â  Â  respuesta: 'Lo siento, no pude generar una respuesta en este momento.',
Â  Â  Â  });
Â  Â  }
Â  } catch (error) {
Â  Â  console.error('Error al conectar con la API de lenguaje:', error);
Â  Â  res.status(500).json({
Â  Â  Â  respuesta: 'OcurriÃ³ un error al procesar tu solicitud.',
Â  Â  });
Â  }
});

export default router;